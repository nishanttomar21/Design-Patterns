// Another way of using Abstract factory Design [No. of classes less]

// Interface for database operations (connect and execute query)
// Create only 1 interface for all the operations
interface DatabaseOperations {
    void connect();
    void executeQuery(String query);
}

// Concrete class for MySQL operations
class MySQLOperations implements DatabaseOperations {
    @Override
    public void connect() {
        System.out.println("Connecting to MySQL database...");
    }

    @Override
    public void executeQuery(String query) {
        System.out.println("Executing MySQL query: " + query);
    }
}

// Concrete class for PostgreSQL operations
class PostgreSQLOperations implements DatabaseOperations {
    @Override
    public void connect() {
        System.out.println("Connecting to PostgreSQL database...");
    }

    @Override
    public void executeQuery(String query) {
        System.out.println("Executing PostgreSQL query: " + query);
    }
}

// Concrete class for SQLite operations
class SQLiteOperations implements DatabaseOperations {
    @Override
    public void connect() {
        System.out.println("Connecting to SQLite database...");
    }

    @Override
    public void executeQuery(String query) {
        System.out.println("Executing SQLite query: " + query);
    }
}

// Abstract Factory Interface for creating database operations
interface DatabaseFactory {
    DatabaseOperations createDatabaseOperations();
}

// Concrete Factory for MySQL
class MySQLFactory implements DatabaseFactory {     // Factory1
    @Override
    public DatabaseOperations createDatabaseOperations() {
        return new MySQLOperations();
    }
}

// Concrete Factory for PostgreSQL      // Factory2
class PostgreSQLFactory implements DatabaseFactory {
    @Override
    public DatabaseOperations createDatabaseOperations() {
        return new PostgreSQLOperations();
    }
}

// Concrete Factory for SQLite
class SQLiteFactory implements DatabaseFactory {        // Factory3
    @Override
    public DatabaseOperations createDatabaseOperations() {
        return new SQLiteOperations();
    }
}

// Client class to interact with the abstract factory
public class AbstractFactoryDatabaseDemo {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // User input for database type
        System.out.println("Enter database type (MySQL/PostgreSQL/SQLite): ");
        String dbType = scanner.nextLine().trim();

        // Get the appropriate factory based on input
        DatabaseFactory factory = getFactory(dbType);

        if (factory != null) {
            // Use the factory to create database operations
            DatabaseOperations operations = factory.createDatabaseOperations();

            // Connect to the database and execute a query
            operations.connect();
            operations.executeQuery("SELECT * FROM users");
        } else {
            System.out.println("Invalid database type!");
        }
    }

    // Factory selection logic (*) [OCP violation, AnotherExample3.txt file shows a better approach w/o violating OCP principle]
    public static DatabaseFactory getFactory(String dbType) {
        if (dbType.equalsIgnoreCase("MySQL")) {
            return new MySQLFactory();
        } else if (dbType.equalsIgnoreCase("PostgreSQL")) {
            return new PostgreSQLFactory();
        } else if (dbType.equalsIgnoreCase("SQLite")) {
            return new SQLiteFactory();
        } else {
            return null; // Unknown database type
        }
    }
}
